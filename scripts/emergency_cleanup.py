#!/usr/bin/env python3
"""
Script de emergencia para limpiar credenciales expuestas
"""

import os
import re

def clean_sensitive_files():
    """Limpiar archivos que contienen credenciales sensibles"""
    
    # Lista de archivos que contienen credenciales reales
    sensitive_files = [
        "backend/env.production",
        "scripts/run_backend_aiven.cmd", 
        "scripts/start_local_aiven.bat",
        "scripts/test_local.env",
        "docs/CAMBIOS_VERSION_0.0.2.md",
        "docs/DEPLOYMENT_GUIDE.md",
        "docs/DOCUMENTACION_COMPLETA_ASTREN.md"
    ]
    
    # Patr√≥n para encontrar la contrase√±a real
    password_pattern = r'AVNS_v9XMXN-BE9Or-VI580I'
    replacement = 'YOUR_AIVEN_PASSWORD_HERE'
    
    print("üö® LIMPIEZA DE CREDENCIALES SENSIBLES")
    print("=" * 50)
    
    for file_path in sensitive_files:
        if os.path.exists(file_path):
            print(f"üîç Procesando: {file_path}")
            
            try:
                # Leer archivo
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Reemplazar contrase√±a real
                if password_pattern in content:
                    new_content = re.sub(password_pattern, replacement, content)
                    
                    # Escribir archivo limpio
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                    
                    print(f"‚úÖ Limpiado: {file_path}")
                else:
                    print(f"‚ÑπÔ∏è  No contiene credenciales: {file_path}")
                    
            except Exception as e:
                print(f"‚ùå Error procesando {file_path}: {e}")
        else:
            print(f"‚ö†Ô∏è  Archivo no encontrado: {file_path}")
    
    print("\n" + "=" * 50)
    print("‚úÖ LIMPIEZA COMPLETADA")
    print("‚ö†Ô∏è  IMPORTANTE: Revisa cada archivo manualmente")
    print("‚ö†Ô∏è  IMPORTANTE: Cambia la contrase√±a en Aiven")

def create_secure_env_template():
    """Crear plantilla segura para archivos de entorno"""
    
    template_content = """# Configuraci√≥n de Base de Datos para Aiven
# ‚ö†Ô∏è  IMPORTANTE: Reemplaza los valores con tus credenciales reales
# ‚ö†Ô∏è  IMPORTANTE: NUNCA subas este archivo con credenciales reales

MYSQL_HOST=your-aiven-host.aivencloud.com
MYSQL_USER=your-aiven-user
MYSQL_PASSWORD=YOUR_AIVEN_PASSWORD_HERE
MYSQL_DATABASE=your-database-name
MYSQL_PORT=your-port

# Configuraci√≥n de Flask
FLASK_ENV=production
FLASK_DEBUG=False
PORT=8000

# Configuraci√≥n SSL para Aiven
MYSQL_SSL_MODE=REQUIRED
MYSQL_SSL_CA=/path/to/ca.pem
"""
    
    # Crear plantilla para producci√≥n
    with open("backend/env.production.template", "w", encoding="utf-8") as f:
        f.write(template_content)
    
    print("üìÑ Creado: backend/env.production.template")
    print("üí° Usa este archivo como plantilla para tu configuraci√≥n real")

def main():
    print("üö® SCRIPT DE EMERGENCIA - LIMPIEZA DE CREDENCIALES")
    print("=" * 60)
    print("‚ö†Ô∏è  ADVERTENCIA: Este script limpiar√° credenciales sensibles")
    print("‚ö†Ô∏è  ADVERTENCIA: Aseg√∫rate de tener respaldo de tus credenciales")
    print("=" * 60)
    
    response = input("¬øContinuar con la limpieza? (s√≠/no): ").lower()
    
    if response in ['s√≠', 'si', 'yes', 'y']:
        clean_sensitive_files()
        create_secure_env_template()
        
        print("\n" + "=" * 60)
        print("üéØ ACCIONES INMEDIATAS REQUERIDAS:")
        print("=" * 60)
        print("1. üîë CAMBIA LA CONTRASE√ëA EN AIVEN INMEDIATAMENTE")
        print("2. üìù Actualiza todos los archivos con la nueva contrase√±a")
        print("3. üîí Aseg√∫rate de que .gitignore incluya archivos sensibles")
        print("4. üóëÔ∏è  Elimina el historial de Git si es necesario")
        print("5. üîÑ Haz commit de los cambios limpios")
        print("=" * 60)
    else:
        print("‚ùå Operaci√≥n cancelada")

if __name__ == "__main__":
    main()
